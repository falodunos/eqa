<?php
$title = 'ANSWER';
$this->headTitle($title);
$url1 = $this->url('zfcadmin');
$url2 = $this->url('zfcadmin');
$parameters = array(
    array(
        'url' => $url1,
        'title' => 'Answer Option'
    ),
    array(
        'url' => $url2,
        'title' => 'Registration'
    )
);
echo $this->getBreadcrumbWidget($parameters);
?>
<!--End Breadcrumb-->

<div class="row">
	<div class="col-xs-12 col-sm-12">
		<div class="box">
			<div class="box-header">
				<div class="box-name">
					<i class="fa fa-search"></i> <span><?php echo $this->translate('Answer Options')?></span>
				</div>
				<div class="box-icons">
					<a class="collapse-link"> <i class="fa fa-chevron-up"></i>
					</a> <a class="expand-link"> <i class="fa fa-expand"></i>
					</a> <a class="close-link"> <i class="fa fa-times"></i>
					</a>
				</div>
				<div class="no-move"></div>
			</div>
			<div class="box-content">
				<div class="row" id="answerOptionContent">
					<div class="col-sm-9">
						<h4 class="page-header"><?php echo $this->translate('Registration form')?></h4>

                        <?php
                        $form = $this->answerOptionForm;
                        $form->setAttributes(array(
                            'action' => $this->url('zfcadmin/exam', array(
                                'action' => 'entry',
                                'controller' => 'answer-option'
                            ))
                        ));
                        $form->prepare();
                        echo $this->form()->openTag($form);
                        $answerOption = $form->get('answer-option-fieldset');
                        $common = $form->get('common-fieldset'); // die('got here');
                        echo $this->formHidden($answerOption->get('id'));
                        ?>
                        <div id="hidden_answer_options"
							style="display: none"></div>
						<div class="form-group">
							<label class="col-sm-2 control-label"><?php echo $this->formLabel($answerOption->get('questionExam')) ?></label>
							<div class="col-sm-4">
                                <?php echo $this->formSelect($answerOption->get('questionExam')); ?>
                            </div>
							<label class="col-sm-2 control-label"><?php echo $this->formLabel($answerOption->get('questionPaper')) ?></label>
							<div class="col-sm-4">
                                <?php echo $this->formSelect($answerOption->get('questionPaper')); ?>
                            </div>
						</div>
						<div class="form-group">
							<label class="col-sm-2 control-label"><?php echo $this->formLabel($answerOption->get('questionSection')) ?></label>
							<div class="col-sm-4">
                                <?php echo $this->formSelect($answerOption->get('questionSection')); ?>
                            </div>

							<label class="col-sm-2 control-label"><?php echo $this->formLabel($answerOption->get('question')) ?></label>
							<div class="col-sm-4">
                                <?php echo $this->formSelect($answerOption->get('question')); ?>
                            </div>
						</div>
						<div class="form-group">
							<label class="col-sm-2 control-label"><?php echo $this->formLabel($answerOption->get('optionText')) ?></label>
							<div class="col-sm-10">
                                <?php echo $this->formTextarea($answerOption->get('optionText')); ?>
                                <small style = 'float:right' >click <a href="#" id = 'copy-content' title = 'Copy Answer Option' onclick="copyContent(this, 'optionText', 'Answer option is empty !')">here</a> to copy option !</small>
                            </div>
						</div>
						<div class="form-group">
							<label class="col-sm-2 control-label"></label> <label
								class="col-sm-4"><?php echo $this->formCheckbox($answerOption->get('isCorrect')).'  ';echo $this->formLabel($answerOption->get('isCorrect')) ?></label>

							<label class="col-sm-2 control-label"><?php echo $this->formLabel($answerOption->get('isActive')) ?></label>
							<div class="col-sm-4">
                                <?php echo $this->formSelect($answerOption->get('isActive')); ?>
                            </div>
						</div>
						<div class="form-group">
							<label class="col-sm-8 control-label"></label>
							<div class="col-sm-4">
                                <?php
                                // echo $this->formHidden($common->get('csrf'));
                                echo $this->formButton($answerOption->get('add-option'));
                                echo ' ';
                                echo $this->formSubmit($common->get('submit'));
                                echo ' ';
                                echo $this->formSubmit($common->get('clear'));
                                echo $this->form()->closeTag();
                                ?>
                            </div>
						</div>
					</div>
					<div class="col-sm-3">
						<h4 class="page-header"><?php echo $this->translate('Instruction')?></h4>
						<div class="row">
							<div class="col-sm-12">
								<div class="row">
									<div class="col-sm-12"><?php echo $this->translate('Further Information')?></div>
									<div class="col-sm-12">
										<ul>
											<li>Fill the form and click save button.</li>
											<li>If you're filling for the first time, use wysiswyg editor to enter and format option text, then copy and paste into option field.</li>
											<li>If you're editing an existing content, copy option text and paste into the editor, edit and reformat as required then copy and paste into option text field again.</li>
										</ul>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
            <?php echo $this->getEntityListWidget('examsqa_admin_answer_option_service', 'getAnswerOptionsHtml'); ?>
        </div>
	</div>
</div>


<script type="text/javascript">
    submitForm('submit-btn', 'exam-answer-option-form');
    submitForm('clear-btn', 'exam-answer-option-form');

    //initializeDependentDropdowm(url, independentSelectElementKey, dependentSelectElementKey, initOptionMessage)
    initializeDependentDropdowm('/admin/question-paper/paper', "select[data-key='exam-selected']", "select[data-key='question-paper-selected']", '- Select Paper -');
    initializeDependentDropdowm('/admin/question-section/section', "select[data-key='question-paper-selected']", "select[data-key='question-section-selected']", '- Select Section -');
    initializeDependentDropdowm('/admin/question/question', "select[data-key='question-section-selected']", "select[data-key='question-selected']", '- Select Question -');

    $('input#submit-btn').prop("disabled", true); // enabling the form submit button ...
    
    // START - DATATABLE:  initialize data table 
    var dataTable;
    if (!$.fn.DataTable.fnIsDataTable('#data-table-container-id')) {
        dataTable = $('#data-table-container-id').dataTable({
            "bPaginate": false,
            "bInfo": false,
            "sScrollY": "300px",
            'bAutoWidth': false,
            'bProcessing': true,
        });

        var optionColumns = [];
        $('#add-option-btn').on('click', function (event) {
            event.preventDefault();
            var form = $('#exam-answer-option-form');
            var fields = form.serializeArray();
            var hasBlank = formHasBlankField(fields);
            if (hasBlank == true) {
                alert('Please fill in the empty fields ...');
            } else {
                $('input#submit-btn').prop("disabled", false);  // enabling the form submit button ...
                var formElements = [];
//                 var rowCount = dataTable.fnSettings().fnRecordsTotal();
                $('#exam-answer-option-form :input').not(':button,:hidden,:submit').each(function () {
                    var element = this;
                    if ($(element).is('select')) {
                        var selected = $("#" + element.id + " option:selected");
                        formElements.push({'id': element.id, 'value': selected.val(), 'text': selected.text()});
                    } else if ($(element).is(':checkbox')) {
                        var checkedText = $(element).is(':checked') == true ? 'Yes' : 'No';
                        var checkedValue = $(element).is(':checked') == true ? '1' : '0';
                        formElements.push({'id': element.id, 'value': checkedValue, 'text': checkedText});
                    } else {
                        formElements.push({'id': element.id, 'value': element.value, 'text': element.value});
                    }
                });

                var optionRows = [];
                var rowCount = 0;
                optionColumns.push(formElements);
                for (var i = optionColumns.length - 1; i >= 0; i--) {
                    var columns = [];
                    rowCount += 1;
//                     columns.push(rowCount);
                    for (var j = 0; j < optionColumns[i].length; j++) {
//                     	optionColumns[i][j].id == ''? columns.push(optionColumns[i][j].text):'';
                        columns.push(optionColumns[i][j].text);
                    }
                    columns.push("<a href='#' class = 'remove-answer-option' id = 'answer-option-" + rowCount + "'>Remove</a>");
                    optionRows.push(columns);
                }

                dataTable.fnClearTable(); // clear database of existing data ...
                dataTable.fnAddData(optionRows);// populate datatable with new data
                populateHiddenOptions(optionColumns); // populate hidden fields with add answer options ...

                // track click on remove link on the datatable ...
                $('.remove-answer-option').on('click', function (event) {
                    event.preventDefault();
                    var idArr = event.target.id.split('-');
                    var rowIndex = parseInt(idArr[2], 10) - parseInt(1, 10);
                    var row = $(this).closest("tr").get(0);
                    dataTable.fnDeleteRow(dataTable.fnGetPosition(row));
                    optionColumns = jQuery.grep(optionColumns, function (optionColumn, index) {
                        return (index !== rowIndex);
                    });
                    populateHiddenOptions(optionColumns); // re-populate hidden fields after removing some options ...
                    dataTable.fnSettings().fnRecordsTotal() == 0 ? $('input#submit-btn').prop("disabled", true) : ''; // disable submit button id dataTable contains no row
                });
            }
        });

        //Populating dataTable with existing answer options of selected question
        $('#question').on('change', function (e) {
            e.preventDefault();
            var questionId = this.value;
            var examId = $("#questionExam option:selected").val();
            var paperId = $("#questionPaper option:selected").val();
            var sectionId = $("#questionSection option:selected").val();

            if (parseInt(questionId, 10) > parseInt(0, 10)) {
                $.post('/admin/answer-option/get-quiz-answer-options', {'examId': examId, 'paperId': paperId, 'sectionId': sectionId, 'questionId': questionId}, function (data) {
                    dataTable.fnClearTable(); // clear database of existing data ...
                    dataTable.fnAddData(data);// populate datatable with new data
                });
            } else {
                dataTable.fnClearTable(); // clear database of existing data ...
            }

        });

        $(document).on("change", "select[data-key='delete-saved-answer-option']", function () {
            var value = this.value;
            if (value == '') { // if selected option value is empty, do not process data
                return false;
            }
            var idArr = value.split('-');
            var element = $(this);
            if ($.inArray('delete', idArr) != -1) {
                var con = confirm('Are you sure you want to permanently delete this item ?');
                if (con == true) {
                    $.post('/admin/answer-option/delete', {'option_id': idArr[2]}, function (data) {
                        if (data.status == true) {
                            alert('It is done, delete operation is successful !');
                            var row = element.closest("tr").get(0);
                            dataTable.fnDeleteRow(dataTable.fnGetPosition(row));
                        }
                        else {
                            alert('Oops, delete operation failed!');
                        }
                    });
                }else{
                	element.val(''); // reset this element selected value back to the default state
                    }
            }
            else if ($.inArray('edit', idArr) != -1) {
            	$.post('/admin/answer-option/update-text', {'option_id': idArr[2]}, function(data){
            		$('#modalbox').html(data);
            		$('#modalbox').modal('show');
           	     });
            	element.val(''); // reset this element selected value back to the default state
            } else;
        });

    }
    //END - DATATABLE : dataTable codes end here ...

    function populateHiddenOptions(options) {
        $hidden_options = [];
        $.each(options, function (key, option) {
            $.each(option, function (i, v) {
                $hidden_options.push('<input type="hidden" name="options[' + key + '][' + v.id + ']" value="' + v.value + '">');
            });
        });
        $('#hidden_answer_options').html($hidden_options);
    }

    function formHasBlankField(fields) {
        var hasBlank = false;
        for (var i = 0; i < fields.length; i++) {
            if (fields[i].name != 'answer-option-fieldset[id]' && fields[i].value == '') {
                hasBlank = true;
            }
        }
        return hasBlank;
    }
</script>